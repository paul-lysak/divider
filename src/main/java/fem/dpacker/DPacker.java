/*
 * Created on 20/3/2007
 *
 */
package fem.dpacker;
import java.util.*;
import java.io.*;

/**
 * DPacker --- data packer for divider
 */
public class DPacker {
	public static void main (String args[]) {
		String if_base=null, of_name=null;
		boolean need_help;
		int i;
		System.out.println(launch_message);
		
		if(args.length==0) //display help message if no arguments given
			{System.out.println(help_message);
			return;}
		for(i=0; i<args.length; i++)//for all arguments
		{
			if(args[i].equalsIgnoreCase("--help"))//user requests help
				{System.out.println(help_message);
				return;}
			int eq_i=args[i].indexOf('=');
			if(eq_i>0&&args[i].substring(0, eq_i).equalsIgnoreCase("--if_base"))
				{if_base=args[i].substring(eq_i+1);}
			if(eq_i>0&&args[i].substring(0, eq_i).equalsIgnoreCase("--of_name"))
				{of_name=args[i].substring(eq_i+1);}
		}//end for all arguments
		if(if_base==null) {System.out.println("No input specified"); return;}
		if(of_name==null) {System.out.println("No output specified"); return;}

		DDataCollector collector=new DDataCollector();
		if(!collector.collect(if_base)) return;
		if(!collector.out(of_name)) return;
	}
	
	public static final String launch_message=
		"DPacker 1.0 --- packs data from Divider for CREEP\n";
	public static final String help_message=
		"Usage: java -jar dpacker.jar [--if_base=input_base.dfig --of_name=out.dat | --help]\n"+
		"\t --help will display this help message\n"+
		"\t --if_base specifies base of input files. There should be such files:\n"+
		"\t\t base.inds, base.koor, base.force, base.contact, base.settings, where 'base' is what specified by --if_base \n"+
		"\t --of_name specifies file, where all gathered data will be saved\n";
}//end class DPacker





/**
 *DDataCollector --- gathers information, generated by divider from 
 *several files and outputs it to one
 */
class DDataCollector
{
	int n_elements, n_nodes, n_forces, n_contacts;
	ArrayList indsStrings=new ArrayList(100);
	ArrayList koorStrings=new ArrayList(100);
	ArrayList contactStrings=new ArrayList(40);
	ArrayList forceStrings=new ArrayList(40);
	Properties settings=new Properties();
	
	boolean collect(String if_base)
	{
		FileInputStream inds_file, koor_file, contact_file, force_file,
			settings_file;
		BufferedReader in;
		String file_name="";
		String line;
		
		//indexes
		try{
			file_name=if_base+".inds";
			inds_file=new FileInputStream(file_name);
		}
		catch(FileNotFoundException e)
		{System.out.println("File not found:"+file_name);return false;}
		in=new BufferedReader(new InputStreamReader(inds_file));
		try {
		line=in.readLine();
		while(line!=null)
		{
			indsStrings.add(line);	
			line=in.readLine();
		}
		}
		catch(IOException e)
		{e.printStackTrace();}
		//end indexes

		//coordinates
		try{
			file_name=if_base+".koor";
			koor_file=new FileInputStream(file_name);
		}
		catch(FileNotFoundException e)
		{System.out.println("File not found:"+file_name);return false;}
		in=new BufferedReader(new InputStreamReader(koor_file));
		try {
		line=in.readLine();
		while(line!=null)
		{
			koorStrings.add(line);	
			line=in.readLine();
		}
		}
		catch(IOException e)
		{e.printStackTrace();}
		//end coordinates 
		
		//contacts
		try{
			file_name=if_base+".contact";
			contact_file=new FileInputStream(file_name);
		}
		catch(FileNotFoundException e)
		{System.out.println("File not found:"+file_name);return false;}
		in=new BufferedReader(new InputStreamReader(contact_file));
		try {
		line=in.readLine();
		while(line!=null)
		{
			contactStrings.add(line);	
			line=in.readLine();
		}
		}
		catch(IOException e)
		{e.printStackTrace();}
		//end contacts

		//forces
		try{
			file_name=if_base+".force";
			force_file=new FileInputStream(file_name);
		}
		catch(FileNotFoundException e)
		{System.out.println("File not found:"+file_name);return false;}
		in=new BufferedReader(new InputStreamReader(force_file));
		try {
		line=in.readLine();
		while(line!=null)
		{
			forceStrings.add(line);	
			line=in.readLine();
		}
		}
		catch(IOException e)
		{e.printStackTrace();}
		//end forces

		//settings
		try{
			file_name=if_base+".settings";
			settings_file=new FileInputStream(file_name);
			settings.load(settings_file);
		}
		catch(FileNotFoundException e)
		{System.out.println("File not found:"+file_name);return false;}
		catch(IOException e)
		{e.printStackTrace();}
		//end settings

		return true;
	}
	
	boolean out(String of_name)
	{
		String sval;
		int i;
		String[] snames={"E","nu","kl","abc","apr","kpr","a5","a2","a3","a4","step","time"};
		FileOutputStream out_file;
		PrintWriter out;

		System.out.println("Writing data to file "+of_name);
		//open file
		try{
			out_file=new FileOutputStream(of_name);
		}
		catch(FileNotFoundException e)
		{e.printStackTrace();return false;}
		out=new PrintWriter(out_file, true);
		//end opening file, now write

		System.out.println("writing settings...");
		//settings
		out.println("[settings]");
/*		for(i=0;i<snames.length; i++)
		{
			sval=settings.getProperty(snames[i]);
			if(sval==null) {System.err.println("ERROR: Property not found:"+snames[i]);}
			out.println(snames[i]+"="+sval);
		}
*/		
		try{
		settings.store(out_file,"");
		}
		catch(IOException e)
		{e.printStackTrace();}
		
		out.println("n_nodes="+koorStrings.size());
		out.println("n_elements="+indsStrings.size());
		out.println("n_contacts="+contactStrings.size());
		out.println("n_forces="+forceStrings.size());
		//end settings
		System.out.println("writing indexes...");
		out.println("[inds]");
		for(i=0;i<indsStrings.size(); i++)
			{out.println(indsStrings.get(i));}
		System.out.println("writing coordinates...");
		out.println("[koor]");
		for(i=0;i<koorStrings.size(); i++)
			{out.println(koorStrings.get(i));}
		System.out.println("writing contacts...");
		out.println("[contact]");
		for(i=0;i<contactStrings.size(); i++)
			{out.println(contactStrings.get(i));}
		System.out.println("writing forces...");
		out.println("[force]");
		for(i=0;i<forceStrings.size(); i++)
			{out.println(forceStrings.get(i));}
		System.out.println("All data written");
		return true;
	}
}//end class DDataCollector
